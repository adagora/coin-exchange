{"version":3,"sources":["components/ExchangeHeader/logo.svg","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/ExchangeHeader/ExchangeHeader.jsx","components/AccountBalance/AccountBalance.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Td","styled","td","TdControls","TdName","Button","button","Coin","props","name","ticker","price","showBalance","balance","action","method","className","onClick","event","preventDefault","handleRefresh","tickerId","handleTransaction","Table","table","CoinList","coinData","map","key","Img","img","Header","header","H1","h1","ExchangeHeader","src","logo","alt","Component","Section","section","Balance","div","BalanceToggleButton","formatter","Intl","NumberFormat","style","currency","AccountBalance","buttonText","content","format","amount","buttonClass","handleBalanceVisibilityChange","handleBrrr","Div","formatPrice","parseFloat","Number","toFixed","App","useState","setBalance","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","oldBalance","oldValue","isBuy","balanceChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.19db6fc2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport propTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Td = styled.td`\n    border: 1px solid #cccccc;\n    width: 14vh;\n`;\n\nconst TdControls = styled(Td)`\n    width: 34vw;\n`;\n\nconst TdName= styled(Td)`\n    width: 24vw;\n`;\n\nconst Button = styled.button`\n    font-size: 11px;\n    width: 64px;\n    margin: 3px 5px 0;\n`;\n\n\nexport default function Coin(props) {\n\n   const handleRefresh = (event) => {\n       //Prevent the default action of submitting the form\n       event.preventDefault();\n       props.handleRefresh(props.tickerId);\n   }\n\n   const handleBuy = (event) => {\n        event.preventDefault();\n        props.handleTransaction(true, props.tickerId);\n    }\n\n    const handleSell = (event) => {\n        event.preventDefault();\n        props.handleTransaction(false, props.tickerId);\n    }\n        return (\n           <tr>\n               <TdName>{props.name}</TdName>\n               <Td>{props.ticker}</Td>\n               <Td>${props.price}</Td>\n               <Td>{props.showBalance ? props.balance : '-'}</Td>\n               <TdControls>\n                    <form action=\"#\" method=\"POST\">\n                    <Button className=\"btn btn-info\" onClick={handleRefresh}>\n                        Refresh\n                    </Button>\n                    <Button className=\"btn btn-success\" onClick={handleBuy}>\n                        Buy\n                    </Button>\n                    <Button className=\"btn btn-danger\" onClick={handleSell}>\n                        Sell\n                    </Button>\n                    </form>\n               </TdControls> \n           </tr>\n        );\n    }\n\nCoin.propTypes = {\n    name: propTypes.string.isRequired,\n    ticker: propTypes.string.isRequired,\n    price: propTypes.number.isRequired\n}\n\n","import React from 'react'\nimport Coin from '../Coin/Coin';\nimport styled from 'styled-components';\n\nconst Table = styled.table`\n        font-size: 1rem;\n`;\n\nexport default function CoinList(props) {\n  return (\n  <Table className=\"table table-primary table-bordered\">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Ticker</th>\n      <th>Price</th>\n      <th>Balance</th>\n      <th>Action</th>\n    </tr>\n  </thead>\n  <tbody>\n    {\n      props.coinData.map( ({key, name, ticker, price, balance}) => \n      <Coin key={key} \n            handleRefresh={props.handleRefresh}\n            handleTransaction={props.handleTransaction}\n            name={name} \n            ticker={ticker}\n            showBalance={props.showBalance}\n            balance={balance}\n            price={price}\n            tickerId={key}/>\n      )\n    }\n  </tbody>\n  </Table>\n  )\n}\n","import React, { Component } from 'react'\nimport logo from './logo.svg';\nimport styled from 'styled-components';\n\n\nconst Img = styled.img`\n    height: 8rem;\n    pointer-events: none;\n`;\nconst Header = styled.header`\n        background-color: #282c34;\n        min-height: 10vh;\n        width: 100%;\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        justify-content: flex-start;\n        font-size: 36 px;\n        color: white;\n  `;\nconst H1 = styled.h1`\n        font-size: 3rem;\n        line-height: 8rem;\n        fold-weight: bold;\n        min-width: 300px;\n `;\n\nexport default class ExchangeHeader extends Component {\n    render() {\n        return (\n            <Header>\n            <Img src={logo} alt=\"React logo\"/>\n            <H1>\n                Coin Exchange\n            </H1>\n            </Header>\n        )\n    }\n}\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport styled from 'styled-components';\n\n\nconst Section = styled.section`\n    font-size: 2rem;\n    text-align: center;\n    margin-bottom: 2rem;\n    line-height: 3rem;\n    display: inline-block;\n`;\n\nconst Balance = styled.div`\n    min-width: 250px;\n    margin: 0.5rem 0 0 2.5rem;\n    font-size: 1.5em;\n    vertical-align: middle;\n    text-align: left;\n`;\n\nconst Button = styled.button`\n    margin 0 8px;\n`;\n\nconst BalanceToggleButton = styled(Button)`\n    width: 150px;\n`;\n\nvar formatter = Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n});\n\nexport default function AccountBalance(props) {\n    \n    const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance';\n    let content = '\\u00A0';\n    if (props.showBalance) {\n        content = <>{ formatter.format(props.amount) }</>\n    }\n    const buttonClass = 'btn ' + (props.showBalance ? 'btn-warning' : 'btn-info');\n    return (\n        <>\n            <Balance>{content}</Balance>\n            <Section>\n                <BalanceToggleButton\n                    onClick={props.handleBalanceVisibilityChange}\n                    className={buttonClass}>\n                    {buttonText}\n                </BalanceToggleButton>\n                <Button className=\"btn btn-success\"\n                        onClick={props.handleBrrr}>\n                    <i className='fa fa-helicopter'></i>\n                </Button>\n            </Section>\n        </>\n    );\n}\n\nAccountBalance.propTypes = {\n    amount: propTypes.string.isRequired,\n}","import React, {useState, useEffect}  from 'react';\nimport CoinList from './components/CoinList/CoinList';\nimport ExchangeHeader from './components/ExchangeHeader/ExchangeHeader';\nimport AccountBalance from './components/AccountBalance/AccountBalance.jsx';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootswatch/dist/flatly/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/js/all';\n\nconst Div = styled.div`\n      text-align: center;\n      background-color: rgb(255, 255, 255);\n      color: #cccccc;\n`; \n\nconst COIN_COUNT = 10;\nconst formatPrice = price => parseFloat(Number(price).toFixed(3));\n\n\nexport default function App(props) {\n  const [balance, setBalance] = useState(1000);\n  const [showBalance, setShowBalance] = useState(false);\n  const [coinData, setCoinData] = useState([]);\n  \n\n  const componentDidMount = async () => {\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins');\n    const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id => axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map(function(response) {\n      const coin = response.data;\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: formatPrice(coin.quotes.USD.price),\n      };\n    });\n    //Retrieve the prices\n    setCoinData(coinPriceData);\n  }\n\n  useEffect(function() {\n    if (coinData.length === 0 ) {\n      componentDidMount();\n    }\n  });\n\n  const handleBrrr = ()  => {\n    setBalance( oldBalance => oldBalance + 10000);\n  }\n\n  const handleBalanceVisibilityChange = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n\n  const handleTransaction = (isBuy, valueChangeId) => {\n    var balanceChange = isBuy ? 1 : -1;\n    const newCoinData = coinData.map( function(values) {\n      let newValues = {...values};\n      if ( valueChangeId == values.key) {\n        newValues.balance += balanceChange;\n        setBalance( oldBalance => oldBalance - balanceChange * newValues.price );\n      }\n      return newValues;\n    });\n    setCoinData(newCoinData);\n  }\n \n  const handleRefresh = async (valueChangeId) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n    debugger;\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map(function( values ) {\n      let newValues = {...values};\n      if ( valueChangeId === values.key ) {\n        newValues.price = newPrice;\n        }\n        return newValues;\n    });\n\n      setCoinData(newCoinData);\n  }\n\n  return (\n    <Div className=\"App\">\n      <ExchangeHeader />\n      <AccountBalance \n        amount={balance} \n        showBalance={showBalance} \n        handleBrrr={handleBrrr}\n        handleBalanceVisibilityChange={handleBalanceVisibilityChange} />\n      <CoinList \n        coinData={coinData}\n        showBalance={showBalance} \n        handleTransaction={handleTransaction}\n        handleRefresh={handleRefresh} />\n    </Div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}