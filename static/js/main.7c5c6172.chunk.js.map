{"version":3,"sources":["components/ExchangeHeader/logo.svg","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/ExchangeHeader/ExchangeHeader.jsx","components/AccountBalance/AccountBalance.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Td","styled","td","Coin","props","name","ticker","price","showBalance","balance","action","method","onClick","event","preventDefault","handleRefresh","tickerId","Table","table","CoinList","coinData","map","key","id","Img","img","Header","header","H1","h1","ExchangeHeader","src","logo","alt","Component","Section","section","AccountBalance","buttonText","content","amount","handleBalanceVisibilityChange","Div","div","formatPrice","parseFloat","Number","toFixed","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","response","coinIds","data","slice","coin","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","className","oldValue","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7c5c6172.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport propTypes from 'prop-types';\nimport styled from 'styled-components';\n\n\n\nconst Td = styled.td`\n    border: 1px solid #cccccc;\n    width: 25vh;\n    `;\n\nexport default function Coin(props) {\n\n   const handleClick = (event) => {\n       //Prevent the default action of submitting the form\n       event.preventDefault();\n\n        //submitting (this.props.ticker) to the parent to find value\n       props.handleRefresh(props.tickerId);\n   }\n        return (\n           <tr>\n               <Td>{props.name}</Td>\n               <Td>{props.ticker}</Td>\n               <Td>${props.price}</Td>\n               {props.showBalance ? <Td>{props.balance}</Td> : null}\n               <Td>\n                    <form action=\"#\" method=\"POST\">\n                        <button onClick={handleClick}>Refresh</button>\n                    </form>\n               </Td> \n           </tr>\n        );\n    }\n\nCoin.propTypes = {\n    name: propTypes.string.isRequired,\n    ticker: propTypes.string.isRequired,\n    price: propTypes.number.isRequired\n}\n\n","import React from 'react'\nimport Coin from '../Coin/Coin';\nimport styled from 'styled-components';\n\nconst Table = styled.table`\n        margin: 50px auto 50px auto;\n        display: inline-block;\n        font-size: 1.4rem;\n`;\n\nexport default function CoinList(props) {\n  return (\n  <Table>\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Ticker</th>\n      <th>Price</th>\n      {props.showBalance ? <th>Balance</th> : null}\n      <th>Action</th>\n    </tr>\n  </thead>\n  <tbody>\n    {\n      props.coinData.map( ({key, name, ticker, price, balance}) => \n      <Coin key={key} \n            id={key}\n            name={name} \n            handleRefresh={props.handleRefresh}\n            ticker={ticker}\n            showBalance={props.showBalance}\n            balance={balance}\n            price={price}\n            />\n      )\n    }\n  </tbody>\n  </Table>\n  )\n}\n","import React, { Component } from 'react'\nimport logo from './logo.svg';\nimport styled from 'styled-components';\n\n\nconst Img = styled.img`\n    height: 8rem;\n    pointer-events: none;\n`;\nconst Header = styled.header`\n        background-color: #282c34;\n        min-height: 20vh;\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        justify-content: flex-start;\n        font-size: 36 px;\n        color: white;\n  `;\nconst H1 = styled.h1`\n        font-size: 4rem;\n `;\n\nexport default class ExchangeHeader extends Component {\n    render() {\n        return (\n            <Header>\n            <Img src={logo} alt=\"React logo\"/>\n            <H1>\n                Coin Exchange\n            </H1>\n            </Header>\n        )\n    }\n}\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport styled from 'styled-components';\n\n\nconst Section = styled.section`\n    border: 1px solid red;\n    font-size: 2rem;\n    text-align: left;\n    padding: 1.5rem 0 1.5rem 5rem;\n`;\n\nexport default function AccountBalance(props) {\n    \n    const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance';\n    let content = null;\n    if ( props.showBalance ) {\n        content = <>Balance: ${props.amount}</>;\n    }\n    return (\n        <Section>\n            {content}\n            <button onClick={props.handleBalanceVisibilityChange}>{buttonText}</button>\n        </Section>\n    );\n}\n\nAccountBalance.propTypes = {\n    amount: propTypes.string.isRequired,\n}","import React, {useState, useEffect}  from 'react';\nimport CoinList from './components/CoinList/CoinList';\nimport ExchangeHeader from './components/ExchangeHeader/ExchangeHeader';\nimport AccountBalance from './components/AccountBalance/AccountBalance.jsx';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nconst Div = styled.div`\n      text-align: center;\n      background-color: rgb(48, 48, 92);\n      color: #cccccc;\n`; \n\nconst COIN_COUNT = 10;\nconst formatPrice = price => parseFloat(Number(price).toFixed(3));\n\n\nexport default function App(props) {\n  const [balance, setBalance] = useState(1000);\n  const [showBalance, setShowBalance] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n  \n\n  const componentDidMount = async () => {\n    const response = await axios.get('https://api.coinpaprika.com/v1/coins');\n    const coinIds = response.data.slice(0, COIN_COUNT).map(coin => coin.id);\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id => axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map(function(response) {\n      const coin = response.data;\n      return {\n        key: coin.id,\n        name: coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        price: formatPrice(coin.quotes.USD.price),\n      };\n    });\n    //Retrieve the prices\n    setCoinData(coinPriceData);\n  }\n\n  useEffect(function() {\n    if (coinData.length === 0 ) {\n      componentDidMount();\n    }\n  });\n\n  const handleBalanceVisibilityChange = () => {\n    setShowBalance(oldValue => !oldValue);\n  }\n \n  const handleRefresh = async (valueChangeId) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n    debugger;\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map(function( values ) {\n      let newValues = {...values};\n      if ( valueChangeId === values.key ) {\n        newValues.price = newPrice;\n        }\n        return newValues;\n    });\n\n      setCoinData(newCoinData);\n  }\n\n  return (\n    <Div className=\"App\">\n      <ExchangeHeader />\n      <AccountBalance \n        amount={balance} \n        showBalance={showBalance} \n        handleBalanceVisibilityChange={handleBalanceVisibilityChange} />\n      <CoinList \n        coinData={coinData}\n        showBalance={showBalance} \n        handleRefresh={handleRefresh} />\n    </Div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}